-- =====================================================
-- ETL PROJECT - ALL SNOWFLAKE SQL SCRIPTS
-- =====================================================
-- This file contains all SQL scripts for the ETL pipeline
-- Database: RETAIL
-- Schemas: RAW, DWH
-- =====================================================

-- =====================================================
-- 01_DDL.SQL - DATABASE SETUP
-- =====================================================
-- Purpose: Creates warehouse, database, schemas, and base tables

CREATE WAREHOUSE IF NOT EXISTS COMPUTE_WH WITH WAREHOUSE_SIZE = 'XSMALL' AUTO_SUSPEND = 60 AUTO_RESUME = TRUE;
CREATE DATABASE IF NOT EXISTS RETAIL;
CREATE SCHEMA IF NOT EXISTS RETAIL.RAW;
CREATE SCHEMA IF NOT EXISTS RETAIL.DWH;

CREATE OR REPLACE TABLE RETAIL.RAW."ORDER" (
  ORDER_ID NUMBER,
  CUSTOMER_ID NUMBER,
  PRODUCT_ID NUMBER,
  QUANTITY NUMBER,
  UNIT_PRICE NUMBER(10,2),
  ORDER_TOTAL NUMBER(12,2),
  SOLD_AT TIMESTAMP_TZ
);

CREATE OR REPLACE TABLE RETAIL.RAW.ORDER_STATUS_EVENTS (
  EVENT_ID STRING,
  ORDER_ID NUMBER,
  CUSTOMER_ID NUMBER,
  NEW_STATUS STRING,
  STATUS_TS TIMESTAMP_TZ,
  SOURCE STRING
);

CREATE OR REPLACE TABLE RETAIL.DWH.ORDER_STATUS (
  ORDER_ID NUMBER PRIMARY KEY,
  CUSTOMER_ID NUMBER,
  PREVIOUS_STATUS STRING,
  CURRENT_STATUS STRING,
  LAST_UPDATE_TS TIMESTAMP_TZ
);

-- =====================================================
-- 02_MERGE.SQL - DATA TRANSFORMATION
-- =====================================================
-- Purpose: MERGE logic to update DWH from RAW events

MERGE INTO RETAIL.DWH.ORDER_STATUS AS T
USING (
  SELECT ORDER_ID, CUSTOMER_ID, NEW_STATUS, STATUS_TS AS LAST_EVENT_TS
  FROM (
    SELECT ORDER_ID, CUSTOMER_ID, NEW_STATUS, STATUS_TS,
           ROW_NUMBER() OVER (PARTITION BY ORDER_ID ORDER BY STATUS_TS DESC) AS RN
    FROM RETAIL.RAW.ORDER_STATUS_EVENTS
  )
  WHERE RN = 1
) AS S
ON T.ORDER_ID = S.ORDER_ID
WHEN MATCHED
  AND (S.LAST_EVENT_TS > T.LAST_UPDATE_TS OR T.LAST_UPDATE_TS IS NULL)
  AND (T.CURRENT_STATUS <> S.NEW_STATUS OR T.CURRENT_STATUS IS NULL)
THEN UPDATE SET
  T.PREVIOUS_STATUS = T.CURRENT_STATUS,
  T.CURRENT_STATUS  = S.NEW_STATUS,
  T.LAST_UPDATE_TS  = S.LAST_EVENT_TS,
  T.CUSTOMER_ID     = S.CUSTOMER_ID
WHEN NOT MATCHED THEN
  INSERT (ORDER_ID, CUSTOMER_ID, PREVIOUS_STATUS, CURRENT_STATUS, LAST_UPDATE_TS)
  VALUES (S.ORDER_ID, S.CUSTOMER_ID, NULL, S.NEW_STATUS, S.LAST_EVENT_TS);

-- =====================================================
-- 03_STREAM_TASK.SQL - AUTOMATION
-- =====================================================
-- Purpose: Creates Stream and Task for real-time processing

USE DATABASE RETAIL;

CREATE OR REPLACE STREAM RETAIL.RAW.ORDER_STATUS_EVENTS_STRM
  ON TABLE RETAIL.RAW.ORDER_STATUS_EVENTS
  APPEND_ONLY = TRUE;

CREATE OR REPLACE TASK RETAIL.DWH.TASK_UPSERT_ORDER_STATUS
  WAREHOUSE = COMPUTE_WH
  SCHEDULE = 'USING CRON */2 * * * * Europe/Paris'
AS
  MERGE INTO RETAIL.DWH.ORDER_STATUS AS T
  USING (
    SELECT ORDER_ID, CUSTOMER_ID, NEW_STATUS, STATUS_TS AS LAST_EVENT_TS
    FROM (
      SELECT ORDER_ID, CUSTOMER_ID, NEW_STATUS, STATUS_TS,
             ROW_NUMBER() OVER (PARTITION BY ORDER_ID ORDER BY STATUS_TS DESC) AS RN
      FROM RETAIL.RAW.ORDER_STATUS_EVENTS
    )
    WHERE RN = 1
  ) AS S
  ON T.ORDER_ID = S.ORDER_ID
  WHEN MATCHED
    AND (S.LAST_EVENT_TS > T.LAST_UPDATE_TS OR T.LAST_UPDATE_TS IS NULL)
    AND (T.CURRENT_STATUS <> S.NEW_STATUS OR T.CURRENT_STATUS IS NULL)
  THEN UPDATE SET
    T.PREVIOUS_STATUS = T.CURRENT_STATUS,
    T.CURRENT_STATUS  = S.NEW_STATUS,
    T.LAST_UPDATE_TS  = S.LAST_EVENT_TS,
    T.CUSTOMER_ID     = S.CUSTOMER_ID
  WHEN NOT MATCHED THEN
    INSERT (ORDER_ID, CUSTOMER_ID, PREVIOUS_STATUS, CURRENT_STATUS, LAST_UPDATE_TS)
    VALUES (S.ORDER_ID, S.CUSTOMER_ID, NULL, S.NEW_STATUS, S.LAST_EVENT_TS);

ALTER TASK RETAIL.DWH.TASK_UPSERT_ORDER_STATUS RESUME;

-- =====================================================
-- 04_VALIDATION.SQL - DATA QUALITY CHECKS
-- =====================================================
-- Purpose: Comprehensive validation to ensure data integrity

-- Raw vs DWH counts
SELECT COUNT(*) AS raw_events FROM RETAIL.RAW.ORDER_STATUS_EVENTS;
SELECT COUNT(*) AS dwh_orders FROM RETAIL.DWH.ORDER_STATUS;

-- Freshness
SELECT MAX(LAST_UPDATE_TS) AS dwh_last_update FROM RETAIL.DWH.ORDER_STATUS;

-- Status distribution
SELECT CURRENT_STATUS, COUNT(*)
FROM RETAIL.DWH.ORDER_STATUS
GROUP BY 1
ORDER BY 2 DESC;

-- DWH order ids must exist in RAW.ORDER (if loaded)
SELECT COUNT(*) AS missing_in_raw_orders
FROM RETAIL.DWH.ORDER_STATUS d
LEFT JOIN RETAIL.RAW."ORDER" o ON o.ORDER_ID = d.ORDER_ID
WHERE o.ORDER_ID IS NULL;

-- Latest event per order agrees with DWH
WITH latest AS (
  SELECT ORDER_ID, NEW_STATUS,
         ROW_NUMBER() OVER (PARTITION BY ORDER_ID ORDER BY STATUS_TS DESC) rn
  FROM RETAIL.RAW.ORDER_STATUS_EVENTS
)
SELECT COUNT(*) AS mismatches
FROM latest l
JOIN RETAIL.DWH.ORDER_STATUS d USING (ORDER_ID)
WHERE l.rn = 1 AND l.NEW_STATUS <> d.CURRENT_STATUS;

-- =====================================================
-- END OF ALL SQL SCRIPTS
-- =====================================================
